import { NextRequest, NextResponse } from 'next/server';
import { auth } from '@clerk/nextjs/server';
import { PrismaClient } from '@prisma/client';
import JSZip from 'jszip';
import type { Framework } from '@prisma/client';

const prisma = new PrismaClient();

export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const { userId } = await auth();
    
    if (!userId) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const projectId = params.id;
    const searchParams = request.nextUrl.searchParams;
    const framework = searchParams.get('framework') as Framework | null;

    // Check if user owns this project
    const project = await prisma.project.findFirst({
      where: { 
        id: projectId,
        user: { clerkId: userId }
      },
      include: {
        generatedVersions: true
      }
    });

    if (!project) {
      return NextResponse.json({ error: 'Project not found' }, { status: 404 });
    }

    if (project.status !== 'COMPLETED') {
      return NextResponse.json({ 
        error: 'Project not ready for download. Please wait for completion.' 
      }, { status: 400 });
    }

    // Filter by framework if specified
    let versions = project.generatedVersions.filter(v => v.status === 'COMPLETED');
    if (framework) {
      versions = versions.filter(v => v.framework === framework);
    }

    if (versions.length === 0) {
      return NextResponse.json({ 
        error: 'No completed versions available for download' 
      }, { status: 404 });
    }

    // Create ZIP file
    const zip = new JSZip();

    // Add README file
    const readmeContent = generateReadmeContent(project, versions);
    zip.file('README.md', readmeContent);

    // Add each framework version
    for (const version of versions) {
      const frameworkFolder = zip.folder(version.framework.toLowerCase());
      
      if (frameworkFolder && Array.isArray(version.files)) {
        // Add files to the framework folder
        for (const file of version.files as any[]) {
          if (file.path && file.content) {
            frameworkFolder.file(file.path, file.content);
          }
        }

        // Add framework-specific instructions
        const instructions = generateFrameworkInstructions(version.framework);
        frameworkFolder.file('SETUP.md', instructions);
      }
    }

    // Generate package.json for the project
    const packageJson = generatePackageJson(project, versions[0].framework);
    zip.file('package.json', JSON.stringify(packageJson, null, 2));

    // Generate ZIP buffer
    const zipBuffer = await zip.generateAsync({ type: 'nodebuffer' });

    // Create filename
    const siteName = new URL(project.originalUrl).hostname.replace('www.', '');
    const filename = framework 
      ? `${siteName}-${framework.toLowerCase()}.zip`
      : `${siteName}-all-frameworks.zip`;

    // Return ZIP file
    return new NextResponse(zipBuffer, {
      status: 200,
      headers: {
        'Content-Type': 'application/zip',
        'Content-Disposition': `attachment; filename="${filename}"`,
        'Content-Length': zipBuffer.length.toString(),
      },
    });

  } catch (error) {
    console.error('Error generating download:', error);
    return NextResponse.json({ error: 'Failed to generate download' }, { status: 500 });
  }
}

function generateReadmeContent(project: any, versions: any[]): string {
  const siteName = new URL(project.originalUrl).hostname;
  const frameworks = versions.map(v => v.framework).join(', ');
  
  return `# ${project.name}

## 📋 Project Information
- **Original URL**: ${project.originalUrl}
- **Cloned on**: ${new Date(project.createdAt).toLocaleDateString()}
- **Detected Technology**: ${project.detectedTechnology || 'Unknown'}
- **Generated Frameworks**: ${frameworks}

## 🚀 Available Versions

${versions.map(version => `
### ${version.framework}
- **Status**: ${version.status}
- **Generated**: ${new Date(version.generatedAt).toLocaleDateString()}
- **Files**: ${(version.files as any[])?.length || 0} files
- **Setup**: See \`${version.framework.toLowerCase()}/SETUP.md\`
`).join('')}

## 📖 How to Use

1. **Choose a framework folder** (e.g., \`nextjs\`, \`react\`, \`html_css_js\`)
2. **Follow the setup instructions** in that folder's SETUP.md
3. **Install dependencies** if required (see package.json)
4. **Run the project** according to framework instructions

## 📞 Support

For questions about this cloned website, visit [CloneForge](${process.env.NEXT_PUBLIC_APP_URL})

---
*Generated by CloneForge - The AI-Powered Website Cloning Platform*
`;
}

function generateFrameworkInstructions(framework: Framework): string {
  switch (framework) {
    case 'NEXTJS':
      return `# Next.js Setup Instructions

## 🚀 Quick Start

1. **Install dependencies**:
   \`\`\`bash
   npm install
   \`\`\`

2. **Run development server**:
   \`\`\`bash
   npm run dev
   \`\`\`

3. **Open your browser** and visit: http://localhost:3000

## 📁 File Structure
- \`app/\` - App Router pages and layouts
- \`components/\` - Reusable React components  
- \`public/\` - Static assets (images, icons, etc.)
- \`styles/\` - CSS and styling files

## 🎯 Production Build
\`\`\`bash
npm run build
npm start
\`\`\`

## 📚 Learn More
- [Next.js Documentation](https://nextjs.org/docs)
`;

    case 'REACT':
      return `# React Setup Instructions

## 🚀 Quick Start

1. **Install dependencies**:
   \`\`\`bash
   npm install
   \`\`\`

2. **Run development server**:
   \`\`\`bash
   npm start
   \`\`\`

3. **Open your browser** and visit: http://localhost:3000

## 📁 File Structure
- \`src/\` - Source code and components
- \`public/\` - Static assets
- \`src/components/\` - React components

## 🎯 Production Build
\`\`\`bash
npm run build
\`\`\`

## 📚 Learn More
- [React Documentation](https://reactjs.org/docs)
`;

    case 'VUE':
      return `# Vue.js Setup Instructions

## 🚀 Quick Start

1. **Install dependencies**:
   \`\`\`bash
   npm install
   \`\`\`

2. **Run development server**:
   \`\`\`bash
   npm run dev
   \`\`\`

3. **Open your browser** and visit: http://localhost:5173

## 📁 File Structure
- \`src/\` - Source code and components
- \`src/components/\` - Vue components
- \`public/\` - Static assets

## 🎯 Production Build
\`\`\`bash
npm run build
\`\`\`

## 📚 Learn More
- [Vue.js Documentation](https://vuejs.org/guide/)
`;

    case 'HTML_CSS_JS':
      return `# HTML/CSS/JS Setup Instructions

## 🚀 Quick Start

1. **Open index.html** in your web browser
2. **Or serve with a local server**:
   \`\`\`bash
   # Using Python
   python -m http.server 8000
   
   # Using Node.js (if you have http-server installed)
   npx http-server
   
   # Using PHP
   php -S localhost:8000
   \`\`\`

## 📁 File Structure
- \`index.html\` - Main HTML file
- \`style.css\` - Stylesheet
- \`script.js\` - JavaScript functionality
- \`assets/\` - Images and other assets

## 🎯 Deployment
Upload all files to your web server or hosting provider.

## 📚 Learn More
- [HTML Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML)
- [CSS Documentation](https://developer.mozilla.org/en-US/docs/Web/CSS)
- [JavaScript Documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript)
`;

    case 'WORDPRESS':
      return `# WordPress Theme Setup Instructions

## 🚀 Quick Start

1. **Upload theme folder** to \`wp-content/themes/\`
2. **Activate theme** in WordPress admin
3. **Customize** as needed

## 📁 File Structure
- \`index.php\` - Main template
- \`style.css\` - Theme styles
- \`functions.php\` - Theme functions
- \`header.php\` - Header template
- \`footer.php\` - Footer template

## 🎯 Requirements
- WordPress 5.0 or higher
- PHP 7.4 or higher

## 📚 Learn More
- [WordPress Theme Development](https://developer.wordpress.org/themes/)
`;

    default:
      return `# Setup Instructions

## 🚀 Quick Start

Please refer to the specific framework documentation for setup instructions.

Generated by CloneForge.
`;
  }
}

function generatePackageJson(project: any, framework: Framework) {
  const siteName = new URL(project.originalUrl).hostname.replace('www.', '').replace('.', '-');
  
  const basePackage = {
    name: `cloned-${siteName}`,
    version: '1.0.0',
    description: `Cloned from ${project.originalUrl}`,
    private: true,
    keywords: ['cloned-website', 'cloneforge'],
    author: 'CloneForge',
    homepage: project.originalUrl
  };

  switch (framework) {
    case 'NEXTJS':
      return {
        ...basePackage,
        scripts: {
          dev: 'next dev',
          build: 'next build',
          start: 'next start',
          lint: 'next lint'
        },
        dependencies: {
          next: '^14.0.0',
          react: '^18.0.0',
          'react-dom': '^18.0.0'
        },
        devDependencies: {
          '@types/node': '^20.0.0',
          '@types/react': '^18.0.0',
          '@types/react-dom': '^18.0.0',
          eslint: '^8.0.0',
          'eslint-config-next': '^14.0.0',
          typescript: '^5.0.0'
        }
      };

    case 'REACT':
      return {
        ...basePackage,
        scripts: {
          start: 'react-scripts start',
          build: 'react-scripts build',
          test: 'react-scripts test',
          eject: 'react-scripts eject'
        },
        dependencies: {
          react: '^18.0.0',
          'react-dom': '^18.0.0',
          'react-scripts': '^5.0.0'
        },
        devDependencies: {
          '@types/react': '^18.0.0',
          '@types/react-dom': '^18.0.0',
          typescript: '^5.0.0'
        }
      };

    case 'VUE':
      return {
        ...basePackage,
        scripts: {
          dev: 'vite',
          build: 'vite build',
          preview: 'vite preview'
        },
        dependencies: {
          vue: '^3.3.0'
        },
        devDependencies: {
          '@vitejs/plugin-vue': '^4.0.0',
          vite: '^4.0.0',
          typescript: '^5.0.0'
        }
      };

    default:
      return basePackage;
  }
}