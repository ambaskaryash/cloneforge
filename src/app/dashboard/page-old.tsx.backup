'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useUser } from '@clerk/nextjs';\nimport { PlusIcon, GlobeAltIcon, ClockIcon, CheckCircleIcon, ExclamationTriangleIcon } from '@heroicons/react/24/outline';\nimport Link from 'next/link';\n\ninterface Project {\n  id: string;\n  name: string;\n  originalUrl: string;\n  status: 'PENDING' | 'ANALYZING' | 'ANALYZED' | 'GENERATING' | 'COMPLETED' | 'FAILED';\n  createdAt: string;\n  detectedTechnology?: string;\n  generatedVersions?: {\n    framework: string;\n    status: string;\n  }[];\n}\n\nexport default function DashboardPage() {\n  const { user } = useUser();\n  const [url, setUrl] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [projects, setProjects] = useState<Project[]>([]);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    fetchProjects();\n  }, []);\n\n  const fetchProjects = async () => {\n    try {\n      const response = await fetch('/api/projects');\n      if (response.ok) {\n        const data = await response.json();\n        setProjects(data.projects);\n      }\n    } catch (error) {\n      console.error('Failed to fetch projects:', error);\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!url.trim()) {\n      setError('Please enter a valid URL');\n      return;\n    }\n\n    setIsLoading(true);\n    setError('');\n\n    try {\n      const response = await fetch('/api/projects', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ url: url.trim() }),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        setUrl('');\n        fetchProjects(); // Refresh the projects list\n      } else {\n        setError(data.error || 'Failed to create project');\n      }\n    } catch (error) {\n      setError('Network error. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const getStatusIcon = (status: Project['status']) => {\n    switch (status) {\n      case 'COMPLETED':\n        return <CheckCircleIcon className=\"h-5 w-5 text-green-500\" />;\n      case 'FAILED':\n        return <ExclamationTriangleIcon className=\"h-5 w-5 text-red-500\" />;\n      case 'ANALYZING':\n      case 'GENERATING':\n        return (\n          <div className=\"h-5 w-5 animate-spin rounded-full border-2 border-blue-500 border-t-transparent\" />\n        );\n      default:\n        return <ClockIcon className=\"h-5 w-5 text-yellow-500\" />;\n    }\n  };\n\n  const getStatusText = (status: Project['status']) => {\n    switch (status) {\n      case 'PENDING':\n        return 'Pending';\n      case 'ANALYZING':\n        return 'Analyzing...';\n      case 'ANALYZED':\n        return 'Analysis Complete';\n      case 'GENERATING':\n        return 'Generating Code...';\n      case 'COMPLETED':\n        return 'Completed';\n      case 'FAILED':\n        return 'Failed';\n      default:\n        return status;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900\">Welcome back, {user?.firstName}!</h1>\n          <p className=\"text-gray-600 mt-2\">Clone any website and convert it to your preferred framework</p>\n        </div>\n\n        {/* URL Input Form */}\n        <div className=\"bg-white rounded-xl shadow-sm border p-6 mb-8\">\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">Clone a New Website</h2>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div>\n              <label htmlFor=\"url\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Website URL\n              </label>\n              <div className=\"relative\">\n                <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                  <GlobeAltIcon className=\"h-5 w-5 text-gray-400\" />\n                </div>\n                <input\n                  type=\"url\"\n                  id=\"url\"\n                  value={url}\n                  onChange={(e) => setUrl(e.target.value)}\n                  placeholder=\"https://example.com\"\n                  className=\"block w-full pl-10 pr-3 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  disabled={isLoading}\n                  required\n                />\n              </div>\n            </div>\n            \n            {error && (\n              <div className=\"text-red-600 text-sm\">{error}</div>\n            )}\n            \n            <button\n              type=\"submit\"\n              disabled={isLoading}\n              className=\"w-full sm:w-auto inline-flex items-center px-6 py-3 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              {isLoading ? (\n                <>\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent mr-2\" />\n                  Analyzing Website...\n                </>\n              ) : (\n                <>\n                  <PlusIcon className=\"h-5 w-5 mr-2\" />\n                  Clone Website\n                </>\n              )}\n            </button>\n          </form>\n        </div>\n\n        {/* Projects List */}\n        <div className=\"bg-white rounded-xl shadow-sm border\">\n          <div className=\"px-6 py-4 border-b\">\n            <h2 className=\"text-xl font-semibold text-gray-900\">Your Projects</h2>\n          </div>\n          \n          {projects.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <GlobeAltIcon className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No projects yet</h3>\n              <p className=\"text-gray-600\">Clone your first website to get started!</p>\n            </div>\n          ) : (\n            <div className=\"divide-y divide-gray-200\">\n              {projects.map((project) => (\n                <div key={project.id} className=\"px-6 py-4 hover:bg-gray-50 transition-colors\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"flex-shrink-0\">\n                          {getStatusIcon(project.status)}\n                        </div>\n                        <div className=\"flex-1 min-w-0\">\n                          <h3 className=\"text-lg font-medium text-gray-900 truncate\">\n                            {project.name || 'Untitled Project'}\n                          </h3>\n                          <p className=\"text-sm text-gray-600 truncate\">{project.originalUrl}</p>\n                          <div className=\"flex items-center space-x-4 mt-2\">\n                            <span className=\"text-xs text-gray-500\">\n                              {getStatusText(project.status)}\n                            </span>\n                            {project.detectedTechnology && (\n                              <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800\">\n                                {project.detectedTechnology}\n                              </span>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex-shrink-0 text-right\">\n                      <p className=\"text-sm text-gray-500\">\n                        {new Date(project.createdAt).toLocaleDateString()}\n                      </p>\n                      {project.status === 'COMPLETED' && (\n                        <Link\n                          href={`/dashboard/projects/${project.id}`}\n                          className=\"mt-2 inline-flex items-center px-3 py-1 border border-transparent text-sm font-medium rounded-md text-blue-700 bg-blue-100 hover:bg-blue-200 transition-colors\"\n                        >\n                          View Project\n                        </Link>\n                      )}\n                    </div>\n                  </div>\n                  \n                  {project.generatedVersions && project.generatedVersions.length > 0 && (\n                    <div className=\"mt-3 flex flex-wrap gap-2\">\n                      {project.generatedVersions.map((version, index) => (\n                        <span\n                          key={index}\n                          className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800\"\n                        >\n                          {version.framework} - {version.status}\n                        </span>\n                      ))}\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}